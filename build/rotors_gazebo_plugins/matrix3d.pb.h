// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matrix3d.proto

#ifndef PROTOBUF_matrix3d_2eproto__INCLUDED
#define PROTOBUF_matrix3d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gz_std_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_matrix3d_2eproto();
void protobuf_AssignDesc_matrix3d_2eproto();
void protobuf_ShutdownFile_matrix3d_2eproto();

class Matrix3d;

// ===================================================================

class Matrix3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_std_msgs.Matrix3d) */ {
 public:
  Matrix3d();
  virtual ~Matrix3d();

  Matrix3d(const Matrix3d& from);

  inline Matrix3d& operator=(const Matrix3d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix3d& default_instance();

  void Swap(Matrix3d* other);

  // implements Message ----------------------------------------------

  inline Matrix3d* New() const { return New(NULL); }

  Matrix3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matrix3d& from);
  void MergeFrom(const Matrix3d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Matrix3d* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double xx = 1;
  bool has_xx() const;
  void clear_xx();
  static const int kXxFieldNumber = 1;
  double xx() const;
  void set_xx(double value);

  // required double yx = 2;
  bool has_yx() const;
  void clear_yx();
  static const int kYxFieldNumber = 2;
  double yx() const;
  void set_yx(double value);

  // required double zx = 3;
  bool has_zx() const;
  void clear_zx();
  static const int kZxFieldNumber = 3;
  double zx() const;
  void set_zx(double value);

  // required double xy = 4;
  bool has_xy() const;
  void clear_xy();
  static const int kXyFieldNumber = 4;
  double xy() const;
  void set_xy(double value);

  // required double yy = 5;
  bool has_yy() const;
  void clear_yy();
  static const int kYyFieldNumber = 5;
  double yy() const;
  void set_yy(double value);

  // required double zy = 6;
  bool has_zy() const;
  void clear_zy();
  static const int kZyFieldNumber = 6;
  double zy() const;
  void set_zy(double value);

  // required double xz = 7;
  bool has_xz() const;
  void clear_xz();
  static const int kXzFieldNumber = 7;
  double xz() const;
  void set_xz(double value);

  // required double yz = 8;
  bool has_yz() const;
  void clear_yz();
  static const int kYzFieldNumber = 8;
  double yz() const;
  void set_yz(double value);

  // required double zz = 9;
  bool has_zz() const;
  void clear_zz();
  static const int kZzFieldNumber = 9;
  double zz() const;
  void set_zz(double value);

  // @@protoc_insertion_point(class_scope:gz_std_msgs.Matrix3d)
 private:
  inline void set_has_xx();
  inline void clear_has_xx();
  inline void set_has_yx();
  inline void clear_has_yx();
  inline void set_has_zx();
  inline void clear_has_zx();
  inline void set_has_xy();
  inline void clear_has_xy();
  inline void set_has_yy();
  inline void clear_has_yy();
  inline void set_has_zy();
  inline void clear_has_zy();
  inline void set_has_xz();
  inline void clear_has_xz();
  inline void set_has_yz();
  inline void clear_has_yz();
  inline void set_has_zz();
  inline void clear_has_zz();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double xx_;
  double yx_;
  double zx_;
  double xy_;
  double yy_;
  double zy_;
  double xz_;
  double yz_;
  double zz_;
  friend void  protobuf_AddDesc_matrix3d_2eproto();
  friend void protobuf_AssignDesc_matrix3d_2eproto();
  friend void protobuf_ShutdownFile_matrix3d_2eproto();

  void InitAsDefaultInstance();
  static Matrix3d* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Matrix3d

// required double xx = 1;
inline bool Matrix3d::has_xx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix3d::set_has_xx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Matrix3d::clear_has_xx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Matrix3d::clear_xx() {
  xx_ = 0;
  clear_has_xx();
}
inline double Matrix3d::xx() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.xx)
  return xx_;
}
inline void Matrix3d::set_xx(double value) {
  set_has_xx();
  xx_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.xx)
}

// required double yx = 2;
inline bool Matrix3d::has_yx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix3d::set_has_yx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Matrix3d::clear_has_yx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Matrix3d::clear_yx() {
  yx_ = 0;
  clear_has_yx();
}
inline double Matrix3d::yx() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.yx)
  return yx_;
}
inline void Matrix3d::set_yx(double value) {
  set_has_yx();
  yx_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.yx)
}

// required double zx = 3;
inline bool Matrix3d::has_zx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Matrix3d::set_has_zx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Matrix3d::clear_has_zx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Matrix3d::clear_zx() {
  zx_ = 0;
  clear_has_zx();
}
inline double Matrix3d::zx() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.zx)
  return zx_;
}
inline void Matrix3d::set_zx(double value) {
  set_has_zx();
  zx_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.zx)
}

// required double xy = 4;
inline bool Matrix3d::has_xy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Matrix3d::set_has_xy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Matrix3d::clear_has_xy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Matrix3d::clear_xy() {
  xy_ = 0;
  clear_has_xy();
}
inline double Matrix3d::xy() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.xy)
  return xy_;
}
inline void Matrix3d::set_xy(double value) {
  set_has_xy();
  xy_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.xy)
}

// required double yy = 5;
inline bool Matrix3d::has_yy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Matrix3d::set_has_yy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Matrix3d::clear_has_yy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Matrix3d::clear_yy() {
  yy_ = 0;
  clear_has_yy();
}
inline double Matrix3d::yy() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.yy)
  return yy_;
}
inline void Matrix3d::set_yy(double value) {
  set_has_yy();
  yy_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.yy)
}

// required double zy = 6;
inline bool Matrix3d::has_zy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Matrix3d::set_has_zy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Matrix3d::clear_has_zy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Matrix3d::clear_zy() {
  zy_ = 0;
  clear_has_zy();
}
inline double Matrix3d::zy() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.zy)
  return zy_;
}
inline void Matrix3d::set_zy(double value) {
  set_has_zy();
  zy_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.zy)
}

// required double xz = 7;
inline bool Matrix3d::has_xz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Matrix3d::set_has_xz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Matrix3d::clear_has_xz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Matrix3d::clear_xz() {
  xz_ = 0;
  clear_has_xz();
}
inline double Matrix3d::xz() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.xz)
  return xz_;
}
inline void Matrix3d::set_xz(double value) {
  set_has_xz();
  xz_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.xz)
}

// required double yz = 8;
inline bool Matrix3d::has_yz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Matrix3d::set_has_yz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Matrix3d::clear_has_yz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Matrix3d::clear_yz() {
  yz_ = 0;
  clear_has_yz();
}
inline double Matrix3d::yz() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.yz)
  return yz_;
}
inline void Matrix3d::set_yz(double value) {
  set_has_yz();
  yz_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.yz)
}

// required double zz = 9;
inline bool Matrix3d::has_zz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Matrix3d::set_has_zz() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Matrix3d::clear_has_zz() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Matrix3d::clear_zz() {
  zz_ = 0;
  clear_has_zz();
}
inline double Matrix3d::zz() const {
  // @@protoc_insertion_point(field_get:gz_std_msgs.Matrix3d.zz)
  return zz_;
}
inline void Matrix3d::set_zz(double value) {
  set_has_zz();
  zz_ = value;
  // @@protoc_insertion_point(field_set:gz_std_msgs.Matrix3d.zz)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_std_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_matrix3d_2eproto__INCLUDED
