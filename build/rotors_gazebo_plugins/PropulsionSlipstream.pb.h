// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropulsionSlipstream.proto

#ifndef PROTOBUF_PropulsionSlipstream_2eproto__INCLUDED
#define PROTOBUF_PropulsionSlipstream_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include "time.pb.h"
// @@protoc_insertion_point(includes)

namespace gz_mav_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_PropulsionSlipstream_2eproto();
void protobuf_AssignDesc_PropulsionSlipstream_2eproto();
void protobuf_ShutdownFile_PropulsionSlipstream_2eproto();

class PropulsionSlipstream;

// ===================================================================

class PropulsionSlipstream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_mav_msgs.PropulsionSlipstream) */ {
 public:
  PropulsionSlipstream();
  virtual ~PropulsionSlipstream();

  PropulsionSlipstream(const PropulsionSlipstream& from);

  inline PropulsionSlipstream& operator=(const PropulsionSlipstream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PropulsionSlipstream& default_instance();

  void Swap(PropulsionSlipstream* other);

  // implements Message ----------------------------------------------

  inline PropulsionSlipstream* New() const { return New(NULL); }

  PropulsionSlipstream* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PropulsionSlipstream& from);
  void MergeFrom(const PropulsionSlipstream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PropulsionSlipstream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d rotor_pos = 1;
  bool has_rotor_pos() const;
  void clear_rotor_pos();
  static const int kRotorPosFieldNumber = 1;
  const ::gazebo::msgs::Vector3d& rotor_pos() const;
  ::gazebo::msgs::Vector3d* mutable_rotor_pos();
  ::gazebo::msgs::Vector3d* release_rotor_pos();
  void set_allocated_rotor_pos(::gazebo::msgs::Vector3d* rotor_pos);

  // required .gazebo.msgs.Vector3d ind_vel_disk = 2;
  bool has_ind_vel_disk() const;
  void clear_ind_vel_disk();
  static const int kIndVelDiskFieldNumber = 2;
  const ::gazebo::msgs::Vector3d& ind_vel_disk() const;
  ::gazebo::msgs::Vector3d* mutable_ind_vel_disk();
  ::gazebo::msgs::Vector3d* release_ind_vel_disk();
  void set_allocated_ind_vel_disk(::gazebo::msgs::Vector3d* ind_vel_disk);

  // required .gazebo.msgs.Vector3d ind_vel_end = 3;
  bool has_ind_vel_end() const;
  void clear_ind_vel_end();
  static const int kIndVelEndFieldNumber = 3;
  const ::gazebo::msgs::Vector3d& ind_vel_end() const;
  ::gazebo::msgs::Vector3d* mutable_ind_vel_end();
  ::gazebo::msgs::Vector3d* release_ind_vel_end();
  void set_allocated_ind_vel_end(::gazebo::msgs::Vector3d* ind_vel_end);

  // required .gazebo.msgs.Vector3d wake_dir = 4;
  bool has_wake_dir() const;
  void clear_wake_dir();
  static const int kWakeDirFieldNumber = 4;
  const ::gazebo::msgs::Vector3d& wake_dir() const;
  ::gazebo::msgs::Vector3d* mutable_wake_dir();
  ::gazebo::msgs::Vector3d* release_wake_dir();
  void set_allocated_wake_dir(::gazebo::msgs::Vector3d* wake_dir);

  // required double l_a = 5;
  bool has_l_a() const;
  void clear_l_a();
  static const int kLAFieldNumber = 5;
  double l_a() const;
  void set_l_a(double value);

  // required double l_p = 6;
  bool has_l_p() const;
  void clear_l_p();
  static const int kLPFieldNumber = 6;
  double l_p() const;
  void set_l_p(double value);

  // optional double k_w = 7;
  bool has_k_w() const;
  void clear_k_w();
  static const int kKWFieldNumber = 7;
  double k_w() const;
  void set_k_w(double value);

  // optional double prop_diam = 8;
  bool has_prop_diam() const;
  void clear_prop_diam();
  static const int kPropDiamFieldNumber = 8;
  double prop_diam() const;
  void set_prop_diam(double value);

  // optional .gazebo.msgs.Time timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  const ::gazebo::msgs::Time& timestamp() const;
  ::gazebo::msgs::Time* mutable_timestamp();
  ::gazebo::msgs::Time* release_timestamp();
  void set_allocated_timestamp(::gazebo::msgs::Time* timestamp);

  // @@protoc_insertion_point(class_scope:gz_mav_msgs.PropulsionSlipstream)
 private:
  inline void set_has_rotor_pos();
  inline void clear_has_rotor_pos();
  inline void set_has_ind_vel_disk();
  inline void clear_has_ind_vel_disk();
  inline void set_has_ind_vel_end();
  inline void clear_has_ind_vel_end();
  inline void set_has_wake_dir();
  inline void clear_has_wake_dir();
  inline void set_has_l_a();
  inline void clear_has_l_a();
  inline void set_has_l_p();
  inline void clear_has_l_p();
  inline void set_has_k_w();
  inline void clear_has_k_w();
  inline void set_has_prop_diam();
  inline void clear_has_prop_diam();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector3d* rotor_pos_;
  ::gazebo::msgs::Vector3d* ind_vel_disk_;
  ::gazebo::msgs::Vector3d* ind_vel_end_;
  ::gazebo::msgs::Vector3d* wake_dir_;
  double l_a_;
  double l_p_;
  double k_w_;
  double prop_diam_;
  ::gazebo::msgs::Time* timestamp_;
  friend void  protobuf_AddDesc_PropulsionSlipstream_2eproto();
  friend void protobuf_AssignDesc_PropulsionSlipstream_2eproto();
  friend void protobuf_ShutdownFile_PropulsionSlipstream_2eproto();

  void InitAsDefaultInstance();
  static PropulsionSlipstream* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PropulsionSlipstream

// required .gazebo.msgs.Vector3d rotor_pos = 1;
inline bool PropulsionSlipstream::has_rotor_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PropulsionSlipstream::set_has_rotor_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PropulsionSlipstream::clear_has_rotor_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PropulsionSlipstream::clear_rotor_pos() {
  if (rotor_pos_ != NULL) rotor_pos_->::gazebo::msgs::Vector3d::Clear();
  clear_has_rotor_pos();
}
inline const ::gazebo::msgs::Vector3d& PropulsionSlipstream::rotor_pos() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
  return rotor_pos_ != NULL ? *rotor_pos_ : *default_instance_->rotor_pos_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_rotor_pos() {
  set_has_rotor_pos();
  if (rotor_pos_ == NULL) {
    rotor_pos_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
  return rotor_pos_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::release_rotor_pos() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
  clear_has_rotor_pos();
  ::gazebo::msgs::Vector3d* temp = rotor_pos_;
  rotor_pos_ = NULL;
  return temp;
}
inline void PropulsionSlipstream::set_allocated_rotor_pos(::gazebo::msgs::Vector3d* rotor_pos) {
  delete rotor_pos_;
  rotor_pos_ = rotor_pos;
  if (rotor_pos) {
    set_has_rotor_pos();
  } else {
    clear_has_rotor_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
}

// required .gazebo.msgs.Vector3d ind_vel_disk = 2;
inline bool PropulsionSlipstream::has_ind_vel_disk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PropulsionSlipstream::set_has_ind_vel_disk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PropulsionSlipstream::clear_has_ind_vel_disk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PropulsionSlipstream::clear_ind_vel_disk() {
  if (ind_vel_disk_ != NULL) ind_vel_disk_->::gazebo::msgs::Vector3d::Clear();
  clear_has_ind_vel_disk();
}
inline const ::gazebo::msgs::Vector3d& PropulsionSlipstream::ind_vel_disk() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
  return ind_vel_disk_ != NULL ? *ind_vel_disk_ : *default_instance_->ind_vel_disk_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_ind_vel_disk() {
  set_has_ind_vel_disk();
  if (ind_vel_disk_ == NULL) {
    ind_vel_disk_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
  return ind_vel_disk_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::release_ind_vel_disk() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
  clear_has_ind_vel_disk();
  ::gazebo::msgs::Vector3d* temp = ind_vel_disk_;
  ind_vel_disk_ = NULL;
  return temp;
}
inline void PropulsionSlipstream::set_allocated_ind_vel_disk(::gazebo::msgs::Vector3d* ind_vel_disk) {
  delete ind_vel_disk_;
  ind_vel_disk_ = ind_vel_disk;
  if (ind_vel_disk) {
    set_has_ind_vel_disk();
  } else {
    clear_has_ind_vel_disk();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
}

// required .gazebo.msgs.Vector3d ind_vel_end = 3;
inline bool PropulsionSlipstream::has_ind_vel_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PropulsionSlipstream::set_has_ind_vel_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PropulsionSlipstream::clear_has_ind_vel_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PropulsionSlipstream::clear_ind_vel_end() {
  if (ind_vel_end_ != NULL) ind_vel_end_->::gazebo::msgs::Vector3d::Clear();
  clear_has_ind_vel_end();
}
inline const ::gazebo::msgs::Vector3d& PropulsionSlipstream::ind_vel_end() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
  return ind_vel_end_ != NULL ? *ind_vel_end_ : *default_instance_->ind_vel_end_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_ind_vel_end() {
  set_has_ind_vel_end();
  if (ind_vel_end_ == NULL) {
    ind_vel_end_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
  return ind_vel_end_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::release_ind_vel_end() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
  clear_has_ind_vel_end();
  ::gazebo::msgs::Vector3d* temp = ind_vel_end_;
  ind_vel_end_ = NULL;
  return temp;
}
inline void PropulsionSlipstream::set_allocated_ind_vel_end(::gazebo::msgs::Vector3d* ind_vel_end) {
  delete ind_vel_end_;
  ind_vel_end_ = ind_vel_end;
  if (ind_vel_end) {
    set_has_ind_vel_end();
  } else {
    clear_has_ind_vel_end();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
}

// required .gazebo.msgs.Vector3d wake_dir = 4;
inline bool PropulsionSlipstream::has_wake_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PropulsionSlipstream::set_has_wake_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PropulsionSlipstream::clear_has_wake_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PropulsionSlipstream::clear_wake_dir() {
  if (wake_dir_ != NULL) wake_dir_->::gazebo::msgs::Vector3d::Clear();
  clear_has_wake_dir();
}
inline const ::gazebo::msgs::Vector3d& PropulsionSlipstream::wake_dir() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.wake_dir)
  return wake_dir_ != NULL ? *wake_dir_ : *default_instance_->wake_dir_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_wake_dir() {
  set_has_wake_dir();
  if (wake_dir_ == NULL) {
    wake_dir_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.wake_dir)
  return wake_dir_;
}
inline ::gazebo::msgs::Vector3d* PropulsionSlipstream::release_wake_dir() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.wake_dir)
  clear_has_wake_dir();
  ::gazebo::msgs::Vector3d* temp = wake_dir_;
  wake_dir_ = NULL;
  return temp;
}
inline void PropulsionSlipstream::set_allocated_wake_dir(::gazebo::msgs::Vector3d* wake_dir) {
  delete wake_dir_;
  wake_dir_ = wake_dir;
  if (wake_dir) {
    set_has_wake_dir();
  } else {
    clear_has_wake_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.wake_dir)
}

// required double l_a = 5;
inline bool PropulsionSlipstream::has_l_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PropulsionSlipstream::set_has_l_a() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PropulsionSlipstream::clear_has_l_a() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PropulsionSlipstream::clear_l_a() {
  l_a_ = 0;
  clear_has_l_a();
}
inline double PropulsionSlipstream::l_a() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.l_a)
  return l_a_;
}
inline void PropulsionSlipstream::set_l_a(double value) {
  set_has_l_a();
  l_a_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.l_a)
}

// required double l_p = 6;
inline bool PropulsionSlipstream::has_l_p() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PropulsionSlipstream::set_has_l_p() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PropulsionSlipstream::clear_has_l_p() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PropulsionSlipstream::clear_l_p() {
  l_p_ = 0;
  clear_has_l_p();
}
inline double PropulsionSlipstream::l_p() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.l_p)
  return l_p_;
}
inline void PropulsionSlipstream::set_l_p(double value) {
  set_has_l_p();
  l_p_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.l_p)
}

// optional double k_w = 7;
inline bool PropulsionSlipstream::has_k_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PropulsionSlipstream::set_has_k_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PropulsionSlipstream::clear_has_k_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PropulsionSlipstream::clear_k_w() {
  k_w_ = 0;
  clear_has_k_w();
}
inline double PropulsionSlipstream::k_w() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.k_w)
  return k_w_;
}
inline void PropulsionSlipstream::set_k_w(double value) {
  set_has_k_w();
  k_w_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.k_w)
}

// optional double prop_diam = 8;
inline bool PropulsionSlipstream::has_prop_diam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PropulsionSlipstream::set_has_prop_diam() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PropulsionSlipstream::clear_has_prop_diam() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PropulsionSlipstream::clear_prop_diam() {
  prop_diam_ = 0;
  clear_has_prop_diam();
}
inline double PropulsionSlipstream::prop_diam() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.prop_diam)
  return prop_diam_;
}
inline void PropulsionSlipstream::set_prop_diam(double value) {
  set_has_prop_diam();
  prop_diam_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.prop_diam)
}

// optional .gazebo.msgs.Time timestamp = 9;
inline bool PropulsionSlipstream::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PropulsionSlipstream::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PropulsionSlipstream::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PropulsionSlipstream::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::gazebo::msgs::Time::Clear();
  clear_has_timestamp();
}
inline const ::gazebo::msgs::Time& PropulsionSlipstream::timestamp() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::gazebo::msgs::Time* PropulsionSlipstream::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.timestamp)
  return timestamp_;
}
inline ::gazebo::msgs::Time* PropulsionSlipstream::release_timestamp() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.timestamp)
  clear_has_timestamp();
  ::gazebo::msgs::Time* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void PropulsionSlipstream::set_allocated_timestamp(::gazebo::msgs::Time* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_mav_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PropulsionSlipstream_2eproto__INCLUDED
