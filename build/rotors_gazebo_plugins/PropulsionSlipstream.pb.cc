// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PropulsionSlipstream.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PropulsionSlipstream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gz_mav_msgs {

namespace {

const ::google::protobuf::Descriptor* PropulsionSlipstream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropulsionSlipstream_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PropulsionSlipstream_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PropulsionSlipstream_2eproto() {
  protobuf_AddDesc_PropulsionSlipstream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PropulsionSlipstream.proto");
  GOOGLE_CHECK(file != NULL);
  PropulsionSlipstream_descriptor_ = file->message_type(0);
  static const int PropulsionSlipstream_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, rotor_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, ind_vel_disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, ind_vel_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, wake_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, l_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, l_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, k_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, prop_diam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, timestamp_),
  };
  PropulsionSlipstream_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropulsionSlipstream_descriptor_,
      PropulsionSlipstream::default_instance_,
      PropulsionSlipstream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, _has_bits_[0]),
      -1,
      -1,
      sizeof(PropulsionSlipstream),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropulsionSlipstream, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PropulsionSlipstream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropulsionSlipstream_descriptor_, &PropulsionSlipstream::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PropulsionSlipstream_2eproto() {
  delete PropulsionSlipstream::default_instance_;
  delete PropulsionSlipstream_reflection_;
}

void protobuf_AddDesc_PropulsionSlipstream_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_PropulsionSlipstream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gazebo::msgs::protobuf_AddDesc_vector3d_2eproto();
  ::gazebo::msgs::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032PropulsionSlipstream.proto\022\013gz_mav_msg"
    "s\032\016vector3d.proto\032\ntime.proto\"\242\002\n\024Propul"
    "sionSlipstream\022(\n\trotor_pos\030\001 \002(\0132\025.gaze"
    "bo.msgs.Vector3d\022+\n\014ind_vel_disk\030\002 \002(\0132\025"
    ".gazebo.msgs.Vector3d\022*\n\013ind_vel_end\030\003 \002"
    "(\0132\025.gazebo.msgs.Vector3d\022\'\n\010wake_dir\030\004 "
    "\002(\0132\025.gazebo.msgs.Vector3d\022\013\n\003l_a\030\005 \002(\001\022"
    "\013\n\003l_p\030\006 \002(\001\022\013\n\003k_w\030\007 \001(\001\022\021\n\tprop_diam\030\010"
    " \001(\001\022$\n\ttimestamp\030\t \001(\0132\021.gazebo.msgs.Ti"
    "me", 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PropulsionSlipstream.proto", &protobuf_RegisterTypes);
  PropulsionSlipstream::default_instance_ = new PropulsionSlipstream();
  PropulsionSlipstream::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PropulsionSlipstream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PropulsionSlipstream_2eproto {
  StaticDescriptorInitializer_PropulsionSlipstream_2eproto() {
    protobuf_AddDesc_PropulsionSlipstream_2eproto();
  }
} static_descriptor_initializer_PropulsionSlipstream_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropulsionSlipstream::kRotorPosFieldNumber;
const int PropulsionSlipstream::kIndVelDiskFieldNumber;
const int PropulsionSlipstream::kIndVelEndFieldNumber;
const int PropulsionSlipstream::kWakeDirFieldNumber;
const int PropulsionSlipstream::kLAFieldNumber;
const int PropulsionSlipstream::kLPFieldNumber;
const int PropulsionSlipstream::kKWFieldNumber;
const int PropulsionSlipstream::kPropDiamFieldNumber;
const int PropulsionSlipstream::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropulsionSlipstream::PropulsionSlipstream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_mav_msgs.PropulsionSlipstream)
}

void PropulsionSlipstream::InitAsDefaultInstance() {
  rotor_pos_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  ind_vel_disk_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  ind_vel_end_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  wake_dir_ = const_cast< ::gazebo::msgs::Vector3d*>(&::gazebo::msgs::Vector3d::default_instance());
  timestamp_ = const_cast< ::gazebo::msgs::Time*>(&::gazebo::msgs::Time::default_instance());
}

PropulsionSlipstream::PropulsionSlipstream(const PropulsionSlipstream& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gz_mav_msgs.PropulsionSlipstream)
}

void PropulsionSlipstream::SharedCtor() {
  _cached_size_ = 0;
  rotor_pos_ = NULL;
  ind_vel_disk_ = NULL;
  ind_vel_end_ = NULL;
  wake_dir_ = NULL;
  l_a_ = 0;
  l_p_ = 0;
  k_w_ = 0;
  prop_diam_ = 0;
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropulsionSlipstream::~PropulsionSlipstream() {
  // @@protoc_insertion_point(destructor:gz_mav_msgs.PropulsionSlipstream)
  SharedDtor();
}

void PropulsionSlipstream::SharedDtor() {
  if (this != default_instance_) {
    delete rotor_pos_;
    delete ind_vel_disk_;
    delete ind_vel_end_;
    delete wake_dir_;
    delete timestamp_;
  }
}

void PropulsionSlipstream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropulsionSlipstream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropulsionSlipstream_descriptor_;
}

const PropulsionSlipstream& PropulsionSlipstream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PropulsionSlipstream_2eproto();
  return *default_instance_;
}

PropulsionSlipstream* PropulsionSlipstream::default_instance_ = NULL;

PropulsionSlipstream* PropulsionSlipstream::New(::google::protobuf::Arena* arena) const {
  PropulsionSlipstream* n = new PropulsionSlipstream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropulsionSlipstream::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_mav_msgs.PropulsionSlipstream)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PropulsionSlipstream, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PropulsionSlipstream*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(l_a_, prop_diam_);
    if (has_rotor_pos()) {
      if (rotor_pos_ != NULL) rotor_pos_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_ind_vel_disk()) {
      if (ind_vel_disk_ != NULL) ind_vel_disk_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_ind_vel_end()) {
      if (ind_vel_end_ != NULL) ind_vel_end_->::gazebo::msgs::Vector3d::Clear();
    }
    if (has_wake_dir()) {
      if (wake_dir_ != NULL) wake_dir_->::gazebo::msgs::Vector3d::Clear();
    }
  }
  if (has_timestamp()) {
    if (timestamp_ != NULL) timestamp_->::gazebo::msgs::Time::Clear();
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PropulsionSlipstream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_mav_msgs.PropulsionSlipstream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector3d rotor_pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotor_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ind_vel_disk;
        break;
      }

      // required .gazebo.msgs.Vector3d ind_vel_disk = 2;
      case 2: {
        if (tag == 18) {
         parse_ind_vel_disk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ind_vel_disk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ind_vel_end;
        break;
      }

      // required .gazebo.msgs.Vector3d ind_vel_end = 3;
      case 3: {
        if (tag == 26) {
         parse_ind_vel_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ind_vel_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_wake_dir;
        break;
      }

      // required .gazebo.msgs.Vector3d wake_dir = 4;
      case 4: {
        if (tag == 34) {
         parse_wake_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wake_dir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_l_a;
        break;
      }

      // required double l_a = 5;
      case 5: {
        if (tag == 41) {
         parse_l_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_a_)));
          set_has_l_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_l_p;
        break;
      }

      // required double l_p = 6;
      case 6: {
        if (tag == 49) {
         parse_l_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_p_)));
          set_has_l_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_k_w;
        break;
      }

      // optional double k_w = 7;
      case 7: {
        if (tag == 57) {
         parse_k_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_w_)));
          set_has_k_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_prop_diam;
        break;
      }

      // optional double prop_diam = 8;
      case 8: {
        if (tag == 65) {
         parse_prop_diam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prop_diam_)));
          set_has_prop_diam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_timestamp;
        break;
      }

      // optional .gazebo.msgs.Time timestamp = 9;
      case 9: {
        if (tag == 74) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_mav_msgs.PropulsionSlipstream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_mav_msgs.PropulsionSlipstream)
  return false;
#undef DO_
}

void PropulsionSlipstream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_mav_msgs.PropulsionSlipstream)
  // required .gazebo.msgs.Vector3d rotor_pos = 1;
  if (has_rotor_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rotor_pos_, output);
  }

  // required .gazebo.msgs.Vector3d ind_vel_disk = 2;
  if (has_ind_vel_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ind_vel_disk_, output);
  }

  // required .gazebo.msgs.Vector3d ind_vel_end = 3;
  if (has_ind_vel_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ind_vel_end_, output);
  }

  // required .gazebo.msgs.Vector3d wake_dir = 4;
  if (has_wake_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->wake_dir_, output);
  }

  // required double l_a = 5;
  if (has_l_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->l_a(), output);
  }

  // required double l_p = 6;
  if (has_l_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->l_p(), output);
  }

  // optional double k_w = 7;
  if (has_k_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->k_w(), output);
  }

  // optional double prop_diam = 8;
  if (has_prop_diam()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->prop_diam(), output);
  }

  // optional .gazebo.msgs.Time timestamp = 9;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->timestamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_mav_msgs.PropulsionSlipstream)
}

::google::protobuf::uint8* PropulsionSlipstream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gz_mav_msgs.PropulsionSlipstream)
  // required .gazebo.msgs.Vector3d rotor_pos = 1;
  if (has_rotor_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->rotor_pos_, false, target);
  }

  // required .gazebo.msgs.Vector3d ind_vel_disk = 2;
  if (has_ind_vel_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ind_vel_disk_, false, target);
  }

  // required .gazebo.msgs.Vector3d ind_vel_end = 3;
  if (has_ind_vel_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ind_vel_end_, false, target);
  }

  // required .gazebo.msgs.Vector3d wake_dir = 4;
  if (has_wake_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->wake_dir_, false, target);
  }

  // required double l_a = 5;
  if (has_l_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->l_a(), target);
  }

  // required double l_p = 6;
  if (has_l_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->l_p(), target);
  }

  // optional double k_w = 7;
  if (has_k_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->k_w(), target);
  }

  // optional double prop_diam = 8;
  if (has_prop_diam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->prop_diam(), target);
  }

  // optional .gazebo.msgs.Time timestamp = 9;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->timestamp_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_mav_msgs.PropulsionSlipstream)
  return target;
}

int PropulsionSlipstream::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_mav_msgs.PropulsionSlipstream)
  int total_size = 0;

  if (has_rotor_pos()) {
    // required .gazebo.msgs.Vector3d rotor_pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotor_pos_);
  }

  if (has_ind_vel_disk()) {
    // required .gazebo.msgs.Vector3d ind_vel_disk = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ind_vel_disk_);
  }

  if (has_ind_vel_end()) {
    // required .gazebo.msgs.Vector3d ind_vel_end = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ind_vel_end_);
  }

  if (has_wake_dir()) {
    // required .gazebo.msgs.Vector3d wake_dir = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wake_dir_);
  }

  if (has_l_a()) {
    // required double l_a = 5;
    total_size += 1 + 8;
  }

  if (has_l_p()) {
    // required double l_p = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
int PropulsionSlipstream::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:gz_mav_msgs.PropulsionSlipstream)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d rotor_pos = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotor_pos_);

    // required .gazebo.msgs.Vector3d ind_vel_disk = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ind_vel_disk_);

    // required .gazebo.msgs.Vector3d ind_vel_end = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ind_vel_end_);

    // required .gazebo.msgs.Vector3d wake_dir = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wake_dir_);

    // required double l_a = 5;
    total_size += 1 + 8;

    // required double l_p = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[6 / 32] & 192u) {
    // optional double k_w = 7;
    if (has_k_w()) {
      total_size += 1 + 8;
    }

    // optional double prop_diam = 8;
    if (has_prop_diam()) {
      total_size += 1 + 8;
    }

  }
  // optional .gazebo.msgs.Time timestamp = 9;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropulsionSlipstream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_mav_msgs.PropulsionSlipstream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PropulsionSlipstream* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PropulsionSlipstream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_mav_msgs.PropulsionSlipstream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_mav_msgs.PropulsionSlipstream)
    MergeFrom(*source);
  }
}

void PropulsionSlipstream::MergeFrom(const PropulsionSlipstream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_mav_msgs.PropulsionSlipstream)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rotor_pos()) {
      mutable_rotor_pos()->::gazebo::msgs::Vector3d::MergeFrom(from.rotor_pos());
    }
    if (from.has_ind_vel_disk()) {
      mutable_ind_vel_disk()->::gazebo::msgs::Vector3d::MergeFrom(from.ind_vel_disk());
    }
    if (from.has_ind_vel_end()) {
      mutable_ind_vel_end()->::gazebo::msgs::Vector3d::MergeFrom(from.ind_vel_end());
    }
    if (from.has_wake_dir()) {
      mutable_wake_dir()->::gazebo::msgs::Vector3d::MergeFrom(from.wake_dir());
    }
    if (from.has_l_a()) {
      set_l_a(from.l_a());
    }
    if (from.has_l_p()) {
      set_l_p(from.l_p());
    }
    if (from.has_k_w()) {
      set_k_w(from.k_w());
    }
    if (from.has_prop_diam()) {
      set_prop_diam(from.prop_diam());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::gazebo::msgs::Time::MergeFrom(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PropulsionSlipstream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_mav_msgs.PropulsionSlipstream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropulsionSlipstream::CopyFrom(const PropulsionSlipstream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_mav_msgs.PropulsionSlipstream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropulsionSlipstream::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_rotor_pos()) {
    if (!this->rotor_pos_->IsInitialized()) return false;
  }
  if (has_ind_vel_disk()) {
    if (!this->ind_vel_disk_->IsInitialized()) return false;
  }
  if (has_ind_vel_end()) {
    if (!this->ind_vel_end_->IsInitialized()) return false;
  }
  if (has_wake_dir()) {
    if (!this->wake_dir_->IsInitialized()) return false;
  }
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void PropulsionSlipstream::Swap(PropulsionSlipstream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropulsionSlipstream::InternalSwap(PropulsionSlipstream* other) {
  std::swap(rotor_pos_, other->rotor_pos_);
  std::swap(ind_vel_disk_, other->ind_vel_disk_);
  std::swap(ind_vel_end_, other->ind_vel_end_);
  std::swap(wake_dir_, other->wake_dir_);
  std::swap(l_a_, other->l_a_);
  std::swap(l_p_, other->l_p_);
  std::swap(k_w_, other->k_w_);
  std::swap(prop_diam_, other->prop_diam_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropulsionSlipstream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropulsionSlipstream_descriptor_;
  metadata.reflection = PropulsionSlipstream_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropulsionSlipstream

// required .gazebo.msgs.Vector3d rotor_pos = 1;
bool PropulsionSlipstream::has_rotor_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropulsionSlipstream::set_has_rotor_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void PropulsionSlipstream::clear_has_rotor_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropulsionSlipstream::clear_rotor_pos() {
  if (rotor_pos_ != NULL) rotor_pos_->::gazebo::msgs::Vector3d::Clear();
  clear_has_rotor_pos();
}
const ::gazebo::msgs::Vector3d& PropulsionSlipstream::rotor_pos() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
  return rotor_pos_ != NULL ? *rotor_pos_ : *default_instance_->rotor_pos_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_rotor_pos() {
  set_has_rotor_pos();
  if (rotor_pos_ == NULL) {
    rotor_pos_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
  return rotor_pos_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::release_rotor_pos() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
  clear_has_rotor_pos();
  ::gazebo::msgs::Vector3d* temp = rotor_pos_;
  rotor_pos_ = NULL;
  return temp;
}
void PropulsionSlipstream::set_allocated_rotor_pos(::gazebo::msgs::Vector3d* rotor_pos) {
  delete rotor_pos_;
  rotor_pos_ = rotor_pos;
  if (rotor_pos) {
    set_has_rotor_pos();
  } else {
    clear_has_rotor_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.rotor_pos)
}

// required .gazebo.msgs.Vector3d ind_vel_disk = 2;
bool PropulsionSlipstream::has_ind_vel_disk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropulsionSlipstream::set_has_ind_vel_disk() {
  _has_bits_[0] |= 0x00000002u;
}
void PropulsionSlipstream::clear_has_ind_vel_disk() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropulsionSlipstream::clear_ind_vel_disk() {
  if (ind_vel_disk_ != NULL) ind_vel_disk_->::gazebo::msgs::Vector3d::Clear();
  clear_has_ind_vel_disk();
}
const ::gazebo::msgs::Vector3d& PropulsionSlipstream::ind_vel_disk() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
  return ind_vel_disk_ != NULL ? *ind_vel_disk_ : *default_instance_->ind_vel_disk_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_ind_vel_disk() {
  set_has_ind_vel_disk();
  if (ind_vel_disk_ == NULL) {
    ind_vel_disk_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
  return ind_vel_disk_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::release_ind_vel_disk() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
  clear_has_ind_vel_disk();
  ::gazebo::msgs::Vector3d* temp = ind_vel_disk_;
  ind_vel_disk_ = NULL;
  return temp;
}
void PropulsionSlipstream::set_allocated_ind_vel_disk(::gazebo::msgs::Vector3d* ind_vel_disk) {
  delete ind_vel_disk_;
  ind_vel_disk_ = ind_vel_disk;
  if (ind_vel_disk) {
    set_has_ind_vel_disk();
  } else {
    clear_has_ind_vel_disk();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.ind_vel_disk)
}

// required .gazebo.msgs.Vector3d ind_vel_end = 3;
bool PropulsionSlipstream::has_ind_vel_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PropulsionSlipstream::set_has_ind_vel_end() {
  _has_bits_[0] |= 0x00000004u;
}
void PropulsionSlipstream::clear_has_ind_vel_end() {
  _has_bits_[0] &= ~0x00000004u;
}
void PropulsionSlipstream::clear_ind_vel_end() {
  if (ind_vel_end_ != NULL) ind_vel_end_->::gazebo::msgs::Vector3d::Clear();
  clear_has_ind_vel_end();
}
const ::gazebo::msgs::Vector3d& PropulsionSlipstream::ind_vel_end() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
  return ind_vel_end_ != NULL ? *ind_vel_end_ : *default_instance_->ind_vel_end_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_ind_vel_end() {
  set_has_ind_vel_end();
  if (ind_vel_end_ == NULL) {
    ind_vel_end_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
  return ind_vel_end_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::release_ind_vel_end() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
  clear_has_ind_vel_end();
  ::gazebo::msgs::Vector3d* temp = ind_vel_end_;
  ind_vel_end_ = NULL;
  return temp;
}
void PropulsionSlipstream::set_allocated_ind_vel_end(::gazebo::msgs::Vector3d* ind_vel_end) {
  delete ind_vel_end_;
  ind_vel_end_ = ind_vel_end;
  if (ind_vel_end) {
    set_has_ind_vel_end();
  } else {
    clear_has_ind_vel_end();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.ind_vel_end)
}

// required .gazebo.msgs.Vector3d wake_dir = 4;
bool PropulsionSlipstream::has_wake_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PropulsionSlipstream::set_has_wake_dir() {
  _has_bits_[0] |= 0x00000008u;
}
void PropulsionSlipstream::clear_has_wake_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
void PropulsionSlipstream::clear_wake_dir() {
  if (wake_dir_ != NULL) wake_dir_->::gazebo::msgs::Vector3d::Clear();
  clear_has_wake_dir();
}
const ::gazebo::msgs::Vector3d& PropulsionSlipstream::wake_dir() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.wake_dir)
  return wake_dir_ != NULL ? *wake_dir_ : *default_instance_->wake_dir_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::mutable_wake_dir() {
  set_has_wake_dir();
  if (wake_dir_ == NULL) {
    wake_dir_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.wake_dir)
  return wake_dir_;
}
::gazebo::msgs::Vector3d* PropulsionSlipstream::release_wake_dir() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.wake_dir)
  clear_has_wake_dir();
  ::gazebo::msgs::Vector3d* temp = wake_dir_;
  wake_dir_ = NULL;
  return temp;
}
void PropulsionSlipstream::set_allocated_wake_dir(::gazebo::msgs::Vector3d* wake_dir) {
  delete wake_dir_;
  wake_dir_ = wake_dir;
  if (wake_dir) {
    set_has_wake_dir();
  } else {
    clear_has_wake_dir();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.wake_dir)
}

// required double l_a = 5;
bool PropulsionSlipstream::has_l_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PropulsionSlipstream::set_has_l_a() {
  _has_bits_[0] |= 0x00000010u;
}
void PropulsionSlipstream::clear_has_l_a() {
  _has_bits_[0] &= ~0x00000010u;
}
void PropulsionSlipstream::clear_l_a() {
  l_a_ = 0;
  clear_has_l_a();
}
 double PropulsionSlipstream::l_a() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.l_a)
  return l_a_;
}
 void PropulsionSlipstream::set_l_a(double value) {
  set_has_l_a();
  l_a_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.l_a)
}

// required double l_p = 6;
bool PropulsionSlipstream::has_l_p() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PropulsionSlipstream::set_has_l_p() {
  _has_bits_[0] |= 0x00000020u;
}
void PropulsionSlipstream::clear_has_l_p() {
  _has_bits_[0] &= ~0x00000020u;
}
void PropulsionSlipstream::clear_l_p() {
  l_p_ = 0;
  clear_has_l_p();
}
 double PropulsionSlipstream::l_p() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.l_p)
  return l_p_;
}
 void PropulsionSlipstream::set_l_p(double value) {
  set_has_l_p();
  l_p_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.l_p)
}

// optional double k_w = 7;
bool PropulsionSlipstream::has_k_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PropulsionSlipstream::set_has_k_w() {
  _has_bits_[0] |= 0x00000040u;
}
void PropulsionSlipstream::clear_has_k_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void PropulsionSlipstream::clear_k_w() {
  k_w_ = 0;
  clear_has_k_w();
}
 double PropulsionSlipstream::k_w() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.k_w)
  return k_w_;
}
 void PropulsionSlipstream::set_k_w(double value) {
  set_has_k_w();
  k_w_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.k_w)
}

// optional double prop_diam = 8;
bool PropulsionSlipstream::has_prop_diam() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PropulsionSlipstream::set_has_prop_diam() {
  _has_bits_[0] |= 0x00000080u;
}
void PropulsionSlipstream::clear_has_prop_diam() {
  _has_bits_[0] &= ~0x00000080u;
}
void PropulsionSlipstream::clear_prop_diam() {
  prop_diam_ = 0;
  clear_has_prop_diam();
}
 double PropulsionSlipstream::prop_diam() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.prop_diam)
  return prop_diam_;
}
 void PropulsionSlipstream::set_prop_diam(double value) {
  set_has_prop_diam();
  prop_diam_ = value;
  // @@protoc_insertion_point(field_set:gz_mav_msgs.PropulsionSlipstream.prop_diam)
}

// optional .gazebo.msgs.Time timestamp = 9;
bool PropulsionSlipstream::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PropulsionSlipstream::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void PropulsionSlipstream::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void PropulsionSlipstream::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::gazebo::msgs::Time::Clear();
  clear_has_timestamp();
}
const ::gazebo::msgs::Time& PropulsionSlipstream::timestamp() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.PropulsionSlipstream.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::gazebo::msgs::Time* PropulsionSlipstream::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::gazebo::msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.PropulsionSlipstream.timestamp)
  return timestamp_;
}
::gazebo::msgs::Time* PropulsionSlipstream::release_timestamp() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.PropulsionSlipstream.timestamp)
  clear_has_timestamp();
  ::gazebo::msgs::Time* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void PropulsionSlipstream::set_allocated_timestamp(::gazebo::msgs::Time* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.PropulsionSlipstream.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_mav_msgs

// @@protoc_insertion_point(global_scope)
