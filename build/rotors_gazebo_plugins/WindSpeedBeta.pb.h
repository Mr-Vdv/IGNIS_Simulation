// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WindSpeedBeta.proto

#ifndef PROTOBUF_WindSpeedBeta_2eproto__INCLUDED
#define PROTOBUF_WindSpeedBeta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
#include "vector3d.pb.h"
#include "matrix3d.pb.h"
// @@protoc_insertion_point(includes)

namespace gz_mav_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_WindSpeedBeta_2eproto();
void protobuf_AssignDesc_WindSpeedBeta_2eproto();
void protobuf_ShutdownFile_WindSpeedBeta_2eproto();

class WindSpeedBeta;

// ===================================================================

class WindSpeedBeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_mav_msgs.WindSpeedBeta) */ {
 public:
  WindSpeedBeta();
  virtual ~WindSpeedBeta();

  WindSpeedBeta(const WindSpeedBeta& from);

  inline WindSpeedBeta& operator=(const WindSpeedBeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindSpeedBeta& default_instance();

  void Swap(WindSpeedBeta* other);

  // implements Message ----------------------------------------------

  inline WindSpeedBeta* New() const { return New(NULL); }

  WindSpeedBeta* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindSpeedBeta& from);
  void MergeFrom(const WindSpeedBeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindSpeedBeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gazebo.msgs.Vector3d pos_ned = 2;
  bool has_pos_ned() const;
  void clear_pos_ned();
  static const int kPosNedFieldNumber = 2;
  const ::gazebo::msgs::Vector3d& pos_ned() const;
  ::gazebo::msgs::Vector3d* mutable_pos_ned();
  ::gazebo::msgs::Vector3d* release_pos_ned();
  void set_allocated_pos_ned(::gazebo::msgs::Vector3d* pos_ned);

  // required .gazebo.msgs.Vector3d wind_ned = 3;
  bool has_wind_ned() const;
  void clear_wind_ned();
  static const int kWindNedFieldNumber = 3;
  const ::gazebo::msgs::Vector3d& wind_ned() const;
  ::gazebo::msgs::Vector3d* mutable_wind_ned();
  ::gazebo::msgs::Vector3d* release_wind_ned();
  void set_allocated_wind_ned(::gazebo::msgs::Vector3d* wind_ned);

  // required .gz_std_msgs.Matrix3d wind_grad_ned = 4;
  bool has_wind_grad_ned() const;
  void clear_wind_grad_ned();
  static const int kWindGradNedFieldNumber = 4;
  const ::gz_std_msgs::Matrix3d& wind_grad_ned() const;
  ::gz_std_msgs::Matrix3d* mutable_wind_grad_ned();
  ::gz_std_msgs::Matrix3d* release_wind_grad_ned();
  void set_allocated_wind_grad_ned(::gz_std_msgs::Matrix3d* wind_grad_ned);

  // @@protoc_insertion_point(class_scope:gz_mav_msgs.WindSpeedBeta)
 private:
  inline void set_has_pos_ned();
  inline void clear_has_pos_ned();
  inline void set_has_wind_ned();
  inline void clear_has_wind_ned();
  inline void set_has_wind_grad_ned();
  inline void clear_has_wind_grad_ned();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gazebo::msgs::Vector3d* pos_ned_;
  ::gazebo::msgs::Vector3d* wind_ned_;
  ::gz_std_msgs::Matrix3d* wind_grad_ned_;
  friend void  protobuf_AddDesc_WindSpeedBeta_2eproto();
  friend void protobuf_AssignDesc_WindSpeedBeta_2eproto();
  friend void protobuf_ShutdownFile_WindSpeedBeta_2eproto();

  void InitAsDefaultInstance();
  static WindSpeedBeta* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WindSpeedBeta

// required .gazebo.msgs.Vector3d pos_ned = 2;
inline bool WindSpeedBeta::has_pos_ned() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindSpeedBeta::set_has_pos_ned() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindSpeedBeta::clear_has_pos_ned() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindSpeedBeta::clear_pos_ned() {
  if (pos_ned_ != NULL) pos_ned_->::gazebo::msgs::Vector3d::Clear();
  clear_has_pos_ned();
}
inline const ::gazebo::msgs::Vector3d& WindSpeedBeta::pos_ned() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.WindSpeedBeta.pos_ned)
  return pos_ned_ != NULL ? *pos_ned_ : *default_instance_->pos_ned_;
}
inline ::gazebo::msgs::Vector3d* WindSpeedBeta::mutable_pos_ned() {
  set_has_pos_ned();
  if (pos_ned_ == NULL) {
    pos_ned_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.WindSpeedBeta.pos_ned)
  return pos_ned_;
}
inline ::gazebo::msgs::Vector3d* WindSpeedBeta::release_pos_ned() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.WindSpeedBeta.pos_ned)
  clear_has_pos_ned();
  ::gazebo::msgs::Vector3d* temp = pos_ned_;
  pos_ned_ = NULL;
  return temp;
}
inline void WindSpeedBeta::set_allocated_pos_ned(::gazebo::msgs::Vector3d* pos_ned) {
  delete pos_ned_;
  pos_ned_ = pos_ned;
  if (pos_ned) {
    set_has_pos_ned();
  } else {
    clear_has_pos_ned();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.WindSpeedBeta.pos_ned)
}

// required .gazebo.msgs.Vector3d wind_ned = 3;
inline bool WindSpeedBeta::has_wind_ned() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindSpeedBeta::set_has_wind_ned() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindSpeedBeta::clear_has_wind_ned() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindSpeedBeta::clear_wind_ned() {
  if (wind_ned_ != NULL) wind_ned_->::gazebo::msgs::Vector3d::Clear();
  clear_has_wind_ned();
}
inline const ::gazebo::msgs::Vector3d& WindSpeedBeta::wind_ned() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.WindSpeedBeta.wind_ned)
  return wind_ned_ != NULL ? *wind_ned_ : *default_instance_->wind_ned_;
}
inline ::gazebo::msgs::Vector3d* WindSpeedBeta::mutable_wind_ned() {
  set_has_wind_ned();
  if (wind_ned_ == NULL) {
    wind_ned_ = new ::gazebo::msgs::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.WindSpeedBeta.wind_ned)
  return wind_ned_;
}
inline ::gazebo::msgs::Vector3d* WindSpeedBeta::release_wind_ned() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.WindSpeedBeta.wind_ned)
  clear_has_wind_ned();
  ::gazebo::msgs::Vector3d* temp = wind_ned_;
  wind_ned_ = NULL;
  return temp;
}
inline void WindSpeedBeta::set_allocated_wind_ned(::gazebo::msgs::Vector3d* wind_ned) {
  delete wind_ned_;
  wind_ned_ = wind_ned;
  if (wind_ned) {
    set_has_wind_ned();
  } else {
    clear_has_wind_ned();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.WindSpeedBeta.wind_ned)
}

// required .gz_std_msgs.Matrix3d wind_grad_ned = 4;
inline bool WindSpeedBeta::has_wind_grad_ned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindSpeedBeta::set_has_wind_grad_ned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindSpeedBeta::clear_has_wind_grad_ned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindSpeedBeta::clear_wind_grad_ned() {
  if (wind_grad_ned_ != NULL) wind_grad_ned_->::gz_std_msgs::Matrix3d::Clear();
  clear_has_wind_grad_ned();
}
inline const ::gz_std_msgs::Matrix3d& WindSpeedBeta::wind_grad_ned() const {
  // @@protoc_insertion_point(field_get:gz_mav_msgs.WindSpeedBeta.wind_grad_ned)
  return wind_grad_ned_ != NULL ? *wind_grad_ned_ : *default_instance_->wind_grad_ned_;
}
inline ::gz_std_msgs::Matrix3d* WindSpeedBeta::mutable_wind_grad_ned() {
  set_has_wind_grad_ned();
  if (wind_grad_ned_ == NULL) {
    wind_grad_ned_ = new ::gz_std_msgs::Matrix3d;
  }
  // @@protoc_insertion_point(field_mutable:gz_mav_msgs.WindSpeedBeta.wind_grad_ned)
  return wind_grad_ned_;
}
inline ::gz_std_msgs::Matrix3d* WindSpeedBeta::release_wind_grad_ned() {
  // @@protoc_insertion_point(field_release:gz_mav_msgs.WindSpeedBeta.wind_grad_ned)
  clear_has_wind_grad_ned();
  ::gz_std_msgs::Matrix3d* temp = wind_grad_ned_;
  wind_grad_ned_ = NULL;
  return temp;
}
inline void WindSpeedBeta::set_allocated_wind_grad_ned(::gz_std_msgs::Matrix3d* wind_grad_ned) {
  delete wind_grad_ned_;
  wind_grad_ned_ = wind_grad_ned;
  if (wind_grad_ned) {
    set_has_wind_grad_ned();
  } else {
    clear_has_wind_grad_ned();
  }
  // @@protoc_insertion_point(field_set_allocated:gz_mav_msgs.WindSpeedBeta.wind_grad_ned)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_mav_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WindSpeedBeta_2eproto__INCLUDED
